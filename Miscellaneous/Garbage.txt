; A Broken BLOCK and Several UNUSED (CRAP ??) Routines !!)
;
; note: { BLOCK 0059 } is BAD !! see Label Nrp !!
;   & > w } ? s = 4 ICICICIC
; HEX
; F= Npr
; CODE RP&
; <ASSEMBLE
; H POP,
; ...
; ?? same subroutine, but CUT OFF at end ??
; i.e. no rpE JMP, NEXT or ASSEMBLE> ??
;
; end of { BLOCK 0059 } !!


{ BLOCK 0009 }
( BINARY LOAD  AND BOOT )
  1 1+ BASE ! 10000 BASE ! ( HEX )
CODE UNMAP  0AF B, 0F8D3 , 0F9D3 , 0FF3E , 0FAD3 , NEXT ( )
( : UNMAP  0F1 MEMAP!  ;  ( for GAS TERSE )
HERE CONSTANT .eot  ( end of root terse )
0 VARIABLE .o ( #blks .eot-4000 ) 0 VARIABLE .t ( 4000-8000 )
0 VARIABLE .h ( 8000-HERE )
0 VARIABLE .dp  0 VARIABLE .vp  0 VARIABLE .la
.o 03FE - CONSTANT .svars
: bload ( from-blk to-addr #blks --- next-blk )
  DUP >R 0 DO 2DUP DROP I + BLOCK 2DUP DROP
  I 0400 * + 0400 UNPROT BMOVE PROT LOOP DROP R> + ;
: .rvdl  .vp @ VPTR !  .dp @ DP !  .la @ LAST !  ;
: boot  DISKON   .svars 1 bload  .eot .o @ bload
  04000 .t @ bload  08000 .h @ bload  .rvdl  DROP  DISKOFF ;
UNMAP SCR @ 1+ boot 020 ' T 1- UB! DECIMAL ." 2/25/82" ;S

{ BLOCK 0052 }
( EPSOM ROUTINE )
DED 0 C= XC?
HEX
{ CODE .eps } ASM  ( Houston and Epson printer routine )
{ ASM   H POP, 0 D LXI, 0F8 H MVI, BEGIN,
  E INR, 0=, IF, D INR, 0=, IF, H INR, 0=, IF, ' offl JMP, THEN,
  THEN, THEN, PLSTAT IN, 7 ( 3 ) A BIT, 0<>, IF, 0 ( 2 ) A BIT,
  THEN, 0<>, END, L A MOV, PLDATA OUT, NEXT }
{ : .EPS }  ' .eps PUT ! { ; }
DECIMAL
;S






{ BLOCK 0058 }
( MAZE TABLE )
XC? IFTRUE --> IFEND
HEX
DATA MTMD 1 B, ( # OF MAZES )
02 B, 51 B, 92 B, ( HOSPOS )
XC? IFTRUE 3 B, OTHERWISE 1 B, IFEND ( # OF SPIDERS )
50 B, 00 B, 0A0 B, 70 B, 30 B, ( SPIDER LOCATIONS )
0 , ( GROWL ROUTINE )
( AND THE MAZE DATA )
13 B, 22 B, 32 B, 32 B, 23 B,
31 B, 21 B, 33 B, 33 B, 33 B, 03 B,
03 B, 21 B, 12 B, 31 B, 03 B, 21 B,
0AF B, FF B, FF B, 5F B, 0AF B,
11 B, 21 B, 32 B, 33 B, 03 B,
10 B, 22 B, 20 B, 22 B, 20 B, 02 B,
DECIMAL -->

{ BLOCK 0071 }
  . / /         LIMITY-ON LIMITX-OFF ) <STKH
CODE LIMITY-ON ( --- , set limit-chk y ) vaddr LHLD,
  TVMROPT D LXI, D DAD, TBLIMIT-CHK M SET, H INX, ( tvmropt2)
  TBLIMY-CHK M SET, NEXT
CODE LIMITX-OFF ( --- , res limitbout-chk res limit-chk x )
  vaddr LHLD, TVMROPT D LXI, D DAD, TBLIMIT-CHK M RES,
  H INX, ( tvmropt2 ) TBLIMBOUT-CHK M RES,
  TBLIMX-CHK M RES, NEXT
CODE LIMITY-OFF ( --- , res limitbout-chk res limit-chk y )
  vaddr LHLD, TVMROPT D LXI, D DAD, TBLIMIT-CHK M RES,
  H INX, ( tvmropt2 ) TBLIMBOUT-CHK M RES,
  TBLIMY-CHK M RES, NEXT
: LIMITXY-OFF ( --- , res limitbout-chk res limit-chk x y )
  LIMITX-OFF LIMITY-OFF ;
STK> -->


{ BLOCK 0077 }
CODE SB@ ( addr --- signedval ) EXX, H POP, M L MOV, L A MOV,
 RAL, 0 A MVI, 0 SCI, ( sgn extend ) A H MOV, H PUSH, EXX, NEXT
: @+ ( ptr ---  ptr+1 val )  DUP 1+ SWAP B@ ;
: S@+ ( ptr ---  ptr+1 val ) DUP 1+ SWAP SB@ ;
: @++ ( ptr --- ptr+2 val )  DUP 2+ SWAP @ ;
: -@  ( ptr --- ptr-1 val )  1- DUP B@ ;
: --@ ( ptr --- ptr-2 val )  2- DUP @ ;










{ BLOCK 0081 }
  7 e   ********************************
( LOCAL DISTANCE ROUTINE )
( THIS ROUTINE COMPUTES THE DISTANCE BETWEEN TWO OBJECTS )
( IN: IX= ME IY= OTHER  OUT: A=DIST, CY SET IF DIR REV NEEDED )
F= DIFB F= TRYM F= SAMD F= INFIN
SUBR LDIST <ASSEMBLE
NOWC X E LDX, NOWR X D LDX,
( DOES CI=CO AND RI=RO ? )
E A MOV, NOWC Y CMPX, TRYM JRNZ,
D A MOV, NOWR Y CMPX, TRYM JRNZ,
( ME AND HIM BOTH HAVE SAME ORIGIN )
( ARE WE ON THE SAME BRANCH? )
NOWD X A LDX, NOWD Y CMPX, DIFB JRNZ,
( YES SIR - WE ARE ON SAME BRANCH )
DISTANCE 1+ Y A LDX, DISTANCE 1+ X SUBX, BABS JMP,
-->

{ BLOCK 0083 }
  W k m n V V V V V V V V V V V ) * + , - / 2 8 H X Y Z [ \ g i
k o       V ISTANCE 1+ Y A LDX, DISTANCE 1+ X ADDX, BABS JMP,
LABEL TRYM NOWD X C LDX, H PUSH, move:node CALL, ( TO DEST )
H POP, MAXDIST X A LDX, DISTANCE 1+ X SUBX, ( REVERSE DIST )
A B MOV, ( AND SAVE IT IN B )
D A MOV, NOWR Y CMPX, INFIN JRNZ,
E A MOV, NOWC Y CMPX, INFIN JRNZ,
C A MOV, CMA, 7 ANI, NOWD Y CMPX, SAMD JRZ,
( I AM ON A PATH LEADING ME TO OTHERS ORIGIN )
B A MOV, DISTANCE 1+ Y ADDX, BABS JMP,
( I AM ON COMPLEMENTARY PATH THAT OBJECT IS ON )
LABEL SAMD DISTANCE 1+ Y A LDX, B SUB, BABS JMP,
( OBJECTS ARE FARTHER THEN WE CAN EASILY DETERMINE )
LABEL INFIN 127 A MVI, RET,
ASSEMBLE> -->


{ BLOCK 0087 }
  2 Q T W l X [ n f d g COCOCOCO
SPOTMONS Zwa ANIM!
ESTPOS
XOR-ON BEGIN DIVG
ON:TARGET? IF
CHASEPLAYER ON:TARGET? IF VAMOOSE THEN
RECON COGO ZEROTIMEB
THEN FOLLOWTRACK NOWD VB!
DEPART:NODE
( HAVE MONSTER CRAWL ABOUT )
BEGIN POA MONSPD HOOK!-ON
MVECT-ON VM-W ZGO DIVG
-->




{ BLOCK 0092 }
( WRITE ALL THE WALLS )
CODE WALDO DI, H POP, D POP, L D MOV,
B PUSH, X PUSHX,
NBX C MVI, node^ CALL, M C MOV, H INX, M B MOV, H INX,
RCX SBCD, M C MOV, H INX, M B MOV, RCY SBCD,
D A MOV, NROWS 1- CPI, 0<>, IF,
WAL0 X LXIX, 0 C MVI, WALRUS CALL, THEN,
E A MOV, A ANA, 0<>, IF,
WAL1 X LXIX, 1 C MVI, WALRUS CALL, THEN,
E A MOV, NCOLS 1- CPI, 0<>, IF,
WAL2 X LXIX, 2 C MVI, WALRUS CALL, THEN,
D A MOV, A ANA, 0<>, IF,
WAL3 X LXIX, 3 C MVI, WALRUS CALL, THEN,
X POPX, B POP, NEXT
;S


{ BLOCK 0101 }
( MESH MATRIX GOODIES )
0 SC= NODX NC= NODXH
NC= NODY NC= NODYH NC= NBX 1+ NC= NBY 1+
NC= MPL0 3 +
NC= NDX0 3 +
NC= NDY0 3 +
NC= RVMD 3 +
NC= NODMSK
0 C= NMDRW ( NODE DRAWN ) 7 C= NMEXS ( NODE EXISTS )
1 C= NMDRM ( DRAWN MASK )
HEX 80 DECIMAL C= NMEXM ( EXISTS MASK )

-->





{ BLOCK 0113 }
( STUFF TO REDRAW PATHS )
: REDRAW:PATHS
0 RVVS RVVL FILL
8 0 DO PUSH:CCR I TEST:REL
IF PUSH:CCR I INDEX:VECTOR NOWR OVB!
I INDEX:VECTOR NOWC OVB!
I I INDEX:VECTOR NOWD OVB!
PUSH:CCR I TEST:DRAWN IF I 4 < ELSE 1 THEN
IF ACTREVS 1+B!
I INDEX:VECTOR PATH:REVEAL DI
THEN THEN LOOP ;   -->






{ BLOCK 0117 }
( WALL PATTERNS )
DECIMAL DATA WAL0 12 B, 12 B, 4 B, 3 B,
-1 , -1 B, 0 B, -1 , -1 B, 0 B, -1 , -1 B, 0 B,
DECIMAL DATA WAL1 12 B, 12 B, 1 B, 24 B, HEX
0E0E0 , 0E0E0 , 0E0E0 , 0E0E0 , 0E0E0 , 0E0E0 ,
0E0E0 , 0E0E0 , 0E0E0 , 0E0E0 , 0E0E0 , 0E0E0 ,
DECIMAL DATA WAL2 -9 B, 12 B, 1 B, 24 B, HEX
0E0E0 , 0E0E0 , 0E0E0 , 0E0E0 , 0E0E0 , 0E0E0 ,
0E0E0 , 0E0E0 , 0E0E0 , 0E0E0 , 0E0E0 , 0E0E0 ,
DECIMAL DATA WAL3 12 B, -9 B, 4 B, 3 B,
-1 , -1 B, 0 B, -1 , -1 B, 0 B, -1 , -1 B, 0 B,
-->





{ BLOCK 0146 }
  j ; w G NEOSITIONS FOR HOSTAGES AND TREASURES )
( HIDE HOSTAGES AND TREASURES IN MAZE )
TABLE HID-T HOSV1 , HOSV2 , HOSV3 , HOSV4 , TRSV ,
KEY , 0 ,
-->












{ BLOCK 0152 }
( **********edible*vger********* 08/24/81 )
( ***************************** )
( ***      EDIBLE VGER      *** )
( ***************************** )
DED FSLD ROOT-VGER-TMP
<STK
  1 C= 1-PROC? ( 1 processor system )
  0 C= PRT? ( print out instead of load )

CR CR
 1-PROC? IFTRUE ." now loading ** 1 PROC ** EDIBLE VGER"
 OTHERWISE ." now loading ** 2 PROC ** EDIBLE VGER" IFEND CR
 ."   - 08/24/81"

  PRT? IFTRUE : FLOAD .HOU PRINTFILE ; IFEND
-->

{ BLOCK 0154 }
( GAME STARTER )
: CL-SC sc1l WPZERO sc1h WPZERO sc2l WPZERO sc2h WPZERO ;
: INTSCR SCV P1s #PLA B@ IF SFXV P2s THEN ;
: RAG MYPUP DIVG
8 0 DO 0FA I OUTP LOOP 0 ngS ngL FILL ;
DECIMAL -->





 --> Nw  sc1l WPZERO sc1h WPZERO sc2l WPZERO sc2h WPZERO ;

         ( SOFT NEW GAME REINITIALIZATION )
         : RAG MYPUP DIVG
         8 0 DO 0FA I OUTP LOOP 0 ngS ngL FILL ;

{ BLOCK 0167 }
( VECTOR TYPES )
0 SC= T-TYP NC= H-TYP NC= M-TYP C= K-TYP

-->
( MONSTER PERSONALITY CODES )
0 SC= MPRTH ( RETURN TO HOSTAGE )
NC= MPGUA ( GUARD THE HOSTAGE )
NC= MPCHP ( CHASE THE PLAYER )
NC= MPRND DROP ( RANDOM MOVE )

-->






{ BLOCK 0204 }
( ADD NODE TO QUEUE ROUTINE )
SUBR ADDQ ( HL = NEW, IY = HEAD )
QFL Y E LDX, QFH Y D LDX, E A MOV, D ORA, 0<>, IF,
QBL Y C LDX, QBH Y B LDX, H PUSH, H INX,
E M MOV, H INX, D M MOV, H INX, C M MOV, H INX, B M MOV,
XCHG, D POP, H INX, H INX, H INX, E M MOV, H INX, D M MOV,
E A MOV, B INX, B STAX, D A MOV, B INX, B STAX,
ELSE, L E MOV, H D MOV, H INX, E M MOV, H INX, D M MOV,
H INX, E M MOV, H INX, D M MOV, E QBL Y STX, D QBH Y STX,
THEN, E QFL Y STX, D QFH Y STX, RET,

SUBR kill ( software lockup )
 6 E MVI, BEGIN, BEGIN, BEGIN, ( let watchdog kick or else )
  L DCR, 0=, END, H DCR, 0=, END, E DCR, 0=, END, 0000 JMP,
-->


{ BLOCK 0206 }
--> ( NEW INVERTOR )
HEX
SUBR INVER INVERT LDA, A ANA, RZ,
D A MOV, CMA, A D MOV, E A MOV, CMA, A E MOV,
D INX, H A MOV, CMA, A H MOV, L A MOV, CMA, A L MOV,
H INX, C A MOV, 0C0 XRI, A C MOV, RET,
DECIMAL -->










{ BLOCK 0220 }
  ^ _ RERET VECTOR STUFF )
: Z-B-V 0 BKVS BKVL FILL ;
: Z-P-V 0 PLYVS PLYRL FILL ;
: Z-J-V 0 JOYS JOYL FILL ;
: Z-R-V 0 REVS REVL FILL 0 RVVS RVVL FILL ;
: Z-M-V 0 MONVS MONVL FILL ;

9 VARIABLE FGCLR
: TEST  PUP SPARKLES-OFF FGCLR @ 7 OUTP
SCRERASE Z-B-V BKGV vaddr ! ;

: BARF XDI UNMAP 32 0 DO 0 I OUTP LOOP ;
STK> -->




{ BLOCK 0235 }
( TASK TO REVEAL PARTIAL PASSAGEWAY )
BV= ACTREVS
HEX
: PATH:REVEAL ;TASK: DI
ESTPOS DEPART:NODE INITIAL#LEAP DISTANCE V!
200 DELTADIST V!
REVEALPAT ANIM!
OR-ON 2 TIMEBMAX!
1STWRITE DVECT-ON
PUSH:CCR NOWD VB@ TEST:DRAWN IF 0C XPAND!-ON ELSE
8 XPAND!-ON MAXREVDIST MAXDIST VB! THEN
GO DI
ACTREVS 1-B! ;
DECIMAL -->



{ BLOCK 0236 }
  r s   ; . CECECETUFF: ODESTX! ODESTY! OX! OY! )
: ODESTX! SWAP XADJ SWAP VDESTX OV! ;
: ODESTY! SWAP YADJ SWAP VDESTY OV! ;
: OX! SWAP XADJ SWAP VX OV! ;
: OY! SWAP YADJ SWAP VY OV! ;
-->












{ BLOCK 0239 }
( REVEAL CHAMBERS )
HEX
: CHAMBER:REVEAL ;TASK: DI ACTREVS BZERO
0 NOWC VB! BEGIN 0 NOWR VB! BEGIN
PUSH:CCR TEST:GROTTO:DRAWN IF
ESTPOS DVECT-ON
REDRAW:PATHS
GROTTOPAT ANIM! 1STWRITE 0C XPAND! XPAND-ON OR-ON
1 TIMER!-ON GO
BEGIN 1 TIMER!-ON WAIT DI ACTREVS B@ 0= END
1 TIMER!-ON WAIT
THEN NOWR VB@ 1+ DUP NOWR VB! NROWS = END
NOWC VB@ 1+ DUP NOWC VB! NCOLS = END ;
: RDRAW MYPUP CL REVV CHAMBER:REVEAL BREAK TT ;
DECIMAL -->


{ BLOCK 0247 }
  z 0 1 [ - e Z O   3 NNNNNNNNNNNN
V= TOTAL-CONNECTS V= OLD-CONNECTS
V= START-COL V= STOP-COL
: NOTE:CONNECTIVE CONFLG NODE^ BONE ;
: TEST:CONNECTIVE CONFLG NODEB@ ;
: MARK:CONNECTIVITY     BEGIN
TOTAL-CONNECTS @ OLD-CONNECTS !
NCOLS 0 DO NROWS 0 DO J I TEST:CONNECTIVE NOT IF 8 0 DO
K J I TEST:REL IF
K J I MOVE:NODE CHECK:NODE NOT IF
." FLAKEY " 2DUP . . CR THEN TEST:CONNECTIVE
IF K J NOTE:CONNECTIVE TOTAL-CONNECTS 1+! LEAVE
THEN
THEN LOOP THEN LOOP LOOP
TOTAL-CONNECTS @ OLD-CONNECTS @ = END ;
-->

{ BLOCK 0255 }
    7   d   ~ < + / YSYSYSYSYSYSYSYSYSYSYS
V= OBJECT-MOVING V= INITIAL#TIMER
: JOYSTICK-MONITOR ;TASK:
10 TIMER!-ON WAIT
BEGIN OBJECT-MOVING B@ IF
GET:JOYCODE IF
NOWCODE B@ COM 7 AND = IF
NOWCODE B@ COM 7 AND NOWCODE !
DI PLYRV REVERSE-DELTAS
CURC NEWC VSWAP CURR NEWR VSWAP
INITIAL#TIMER @ PLYRV TIMER-PEEK - PLYRV TIMER-POKE
THEN THEN THEN
6 TIMER!-ON WAIT
0 END ;
DECIMAL -->


{ BLOCK 0257 }
  C q YSYSYSONITOR ) -->
V= OBJECT-MOVING
CODE PUSH:ONCCR XTIY, NXTR Y L LDX, NXTC Y E LDX,
0 H MVI, H D MOV, Y POPX, D PUSH, H PUSH, NEXT
: JOYSTICK-MONITOR ;TASK: 10 TIMER!-ON WAIT
BEGIN OBJECT-MOVING B@ IF PLYRV TIMER-PEEK 2 > IF
PLYRV TIMER-PEEK INITIAL#TIMER @ < IF
GET:JOYCODE IF PLYRV PUSH:ONCCR MPL0 NODE^ SWAP ADJ-SCAN
NOWD PLYRV OVB@ COM 7 AND = IF DI
PLYRV REVERSE:DIRECTION THEN THEN THEN THEN
THEN 2 TIMER!-ON WAIT 0 END ; DECIMAL -->






{ BLOCK 0259 }
  , 1 3 / 2 - B ~ 6   @ N   a ARARARARARARARARAR
: START:MONSTER DUP NCOLS RND NROWS RND ROT SET:INITIAL:MCCR
MONSTER-TASK ;


-->











{ BLOCK 0265 }
    . 8 6 0 v :     S q   Z PRPR
: M-T ;TASK: SPOTMONS TROLL? IF Zwa ELSE Spa THEN ANIM!
ESTPOS 0 TIMEBMAX! 2 TIMEBSCALE!
1STWRITE XOR-ON MSPRO OBJSV VB!
BEGIN DIVG
OBJSV VB@ MSPRO CASE ( MONSTER ON DA PROWL )
( NOW USE INNER STATE VAR )
MMSV VB@ MMONT CASE ( MONSTER ON TARGET POS )
MYHOS OBJSV OVB@ HSATP <> IF
TROLL? IF CHASEPLAYER ELSE MYHOS WZONE IF RANMOVE
ELSE MYHOS DUP NOWC OVB@ INTC VB! NOWR OVB@ INTR VB! THEN
ELSE CHASEPLAYER THEN THEN
ON:TARGET? IF RANMOVE THEN
BE? FPSS ( START THE SEARCH )
MMTHK MMSV VB! 1 TIMER!-ON ( WAIT THEN RAISE MORE HELL )
-->

{ BLOCK 0267 }
( DUNGEON GAME LOADER )
XC? IFTRUE DECIMAL xcsys XCCONT ASM ( .HOU .OPS ) .NOPS
IFEND
FLOAD PA FLOAD VE
FLOAD WP FLOAD RND
FLOAD VA
FLOAD VC
FLOAD DI
FLOAD NM
FLOAD VR
FLOAD CD
FLOAD WR
FLOAD SC
-->



{ BLOCK 0277 }
XC? IFTRUE xcsys XCCONT ( ASM .HOU .OPS ) IFEND
FLOAD MR
FLOAD M
FLOAD MA ( MAGIC )
FLOAD PR
FLOAD P
FLOAD IP
FLOAD SWP
FLOAD GR
FLOAD G
FLOAD RD
FLOAD E
NEWVECT JAYVECT 1+ U! XC? IFTRUE FLUSH xcsys XCSTAT IFEND ;S




{ BLOCK 0278 }
      > RET REVEALER )
PLYRV NOWC OVB@ STOP-COL B@ = IF
PLYRV NOWR OVB@ NROWS 1- = IF
STOPme 1+B! NOBREAK BZERO
THEN THEN
0 END ;
-->










{ BLOCK 0281 }
FLOAD NGM
FLOAD GM
FLOAD LD
FLOAD OT
FLOAD HF
FLOAD LFN
FLOAD R
FLOAD AR
FLOAD T
FLOAD RS
FLOAD H
FLOAD K
XC? IFTRUE EX ;S IFEND
-->



{ BLOCK 0286 }
  5 ST MAZE STUFF )
39 BA= TMAZ
CODE FUDGE-U EXX, H POP, 0 TMAZ D LXI,
M A MOV, H INX, D STAX, D INX,
M A MOV, H INX, D STAX, D INX,
M A MOV, H INX, D STAX, D INX,
M A MOV, H INX, D STAX, D INX,
35 DO, M A MOV, RRC, RRC, RRC, RRC, M ORA, D STAX, D INX,
H INX, LOOP, EXX, NEXT
: TM1 MYPUP XDI CL:NM ZAM FILMAT MD CL INF G& ;
: TM2 FUDGE-U 0 TMAZ TM1 ;
-->





{ BLOCK 0289 }
( CLIPPING - VGER SCREEN PARTITION ROUTINE ) HEX
        F= redge  F= hrz  F= bedge  F= fini  F= negx  F= negy
SUBR code  <ASSEMBLE  H PUSH, A XRA, 7 D BIT, negx JRNZ,
        VLIMLXH Y H LDX, VLIMLXL Y L LDX,
        D DSBC, redge JRC, hrz JRZ,
  LABEL negx  1 ORI, hrz JMPR,
  LABEL redge VLIMHXH Y H LDX, VLIMHXL Y L LDX,   ( right edge )
        A ORA, D DSBC, hrz JRNC, 2 ORI,
  LABEL hrz H POP, EXX, H PUSH, 7 D BIT, negy JRNZ,
        VLIMHYH Y H LDX, VLIMHYL Y L LDX,
        D DSBC, bedge JRC, fini JRZ,
  LABEL negy  8 ORI, fini JMPR,
  LABEL bedge  VLIMLYH Y H LDX, VLIMLYL Y L LDX,
        A ORA, D DSBC, fini JRNC, 4 ORI,
  LABEL fini H POP, EXX, RET,   ASSEMBLE>
 DECIMAL -->

{ BLOCK 0290 }
( CLIPPING - WINDOWING ) HEX
        F= bigp0  F= bigp1
SUBR bigr  <ASSEMBLE  XCHG, 7 H BIT, bigp0 JRNZ, B H MOV,
        C L MOV, D DSBC, bigp1 JRC, B H MOV, C L MOV, RET,
  LABEL bigp1  7 D BIT, bigp0 JRNZ, D H MOV, E L MOV, RET,
  LABEL bigp0  0 H LXI, RET, ASSEMBLE>
    F= bdrkl  F= bdrkl2  F= bdrkl3  F= bdrkl4  F= step2
    F= ovrsht  F= pass2   F= mdpnt  F= rndd  F= rndd2
    F= .rplc  F= rplc  F= p2  F= .end  F= step2+
    BV= ps2p1c  BV= p0cd  BV= p1cd
    V= P0X  V= P1X  V= P0Y  V= P1Y
SUBR clip  <ASSEMBLE  code CALL, A B MOV, XCHG, EXX,
        XCHG, EXX, code CALL, A C MOV, B ORA, RZ,
        C A MOV, B ANA, RNZ,          ( trivially rejected ? )
        EXAF, ( 1X flag ) B A MOV, p0cd STA, ps2p1c STA,
DECIMAL -->

{ BLOCK 0291 }
( CLIPPING - WINDOWING ) HEX

        C A MOV, p1cd STA,         ( save codes & coordinates )
        P1X SDED, P0X SHLD, EXX, P1Y SDED, P0Y SHLD, EXX,
  LABEL step2   A ORA, step2+ JRNZ, EXAF,
        XCHG, EXX, XCHG, EXX, pass2 JRZ, A XRA, RET,
  LABEL step2+ -1 B LXI, EXX, -1 B LXI, EXX,   ( init. midpnt )
  LABEL mdpnt  H PUSH, 7 D BIT, bdrkl JRNZ, 7 H BIT, bdrkl JRNZ,
         D DAD, H SRLR, bdrkl2 JMPR,
  LABEL bdrkl  D DAD, H SRAR,
  LABEL bdrkl2  L RARR, H INX, XCHG, EXX,
        H PUSH, 7 H BIT, bdrkl3 JRNZ, 7 D BIT, bdrkl3 JRNZ,
         D DAD, H SRLR, bdrkl4 JMPR,
  LABEL bdrkl3  D DAD, H SRAR,
  LABEL bdrkl4  L RARR, XCHG, EXX,
DECIMAL -->

{ BLOCK 0292 }
( CLIPPING - MIDPOINT & COMPARISON ) HEX

        D PUSH, E A MOV, C0 ANI, A E MOV, C A MOV,
        C0 ANI, E CMP, D POP, rplc JRNZ,
        B A MOV, D CMP, rplc JRNZ, EXX,
        D PUSH, E A MOV, C0 ANI, A E MOV, C A MOV,
        C0 ANI, E CMP, D POP, .rplc JRNZ,
        B A MOV, D CMP, .rplc JRNZ,
        B POP, bigr CALL, EXX,
        B POP, bigr CALL, EXAF,
        p2 JRNZ, P0X LDED, P1X SHLD, EXX,
                 P0Y LDED, P1Y SHLD, EXX,
  LABEL pass2  A INR, EXAF,      ( reverse init. for pass2 )
        A XRA, p0cd STA, ps2p1c LDA, p1cd STA, step2 JMP,
DECIMAL -->


{ BLOCK 0293 }
( CLIPPING - LINE-PART ELIMINATION PROCESS ) HEX

  LABEL p2  P1X LDED, EXX, P1Y LDED, EXX, A XRA, RET,
  LABEL .rplc EXX,
  LABEL  rplc code CALL, A C MOV,        ( midcode -> C )
        p1cd LDA, C ANA, ovrsht JRNZ,
        C A MOV, p0cd STA,                ( store midcode )
        XCHG, H B MOV, L C MOV, EXX,
        XCHG, H B MOV, L C MOV, EXX,
        PSW POP, PSW POP, ( dump P0 ) mdpnt JMP,
  LABEL ovrsht  C A MOV, p1cd STA, p0cd LDA, C ANA,
        .end JRNZ,                  ( trivially rejected )
        EXX, H POP, ( P0 -> HL ) D B MOV, E C MOV,
        EXX, H POP, ( X coord. ) D B MOV, E C MOV, mdpnt JMP,
  LABEL .end  H POP, H POP, ( dump stack ) RET,    ASSEMBLE>
DECIMAL -->

{ BLOCK 0294 }
( SUPER FAST <hopefully> LINE DRAWING ROUTINE ) HEX
        F= pos
SUBR sbabsh ( subtract , abs val & shift )  <ASSEMBLE
        A ANA, D DSBC, PSW PUSH, pos JRNC,
        H A MOV, CMA, A H MOV, L A MOV, CMA, A L MOV, H INX,
  LABEL pos   ( shift HL right 6 bits )
        A XRA, H DAD, RAL, H DAD, RAL, H L MOV, A H MOV,
        PSW POP, RET,  ASSEMBLE>

      F= neg  F= next  F= posi
SUBR slop  ( incr Y from slope )  <ASSEMBLE  next JRC,
        EXAF, posi JRNC,
  LABEL neg -50 B LXI, RET,
  LABEL next EXAF, neg JRNC,
  LABEL posi 50 B LXI, RET,   ASSEMBLE>
 DECIMAL -->

{ BLOCK 0295 }
( MORE FAST LINE SNORTS ) HEX

SUBR init  ( set regs. for write loop ) D PUSH, ( cntr )
        H DAD, H PUSH, A ANA, D DSBC, H PUSH, A ANA, D DSBC,
        XCHG, H POP, B POP,
        EXX, H POP, H INX, ( cntr ) VXPAND Y A LDX, RRC, RRC,
        A D MOV, EXAF, ( shift amount ) A E MOV,
        VMAGIC Y A LDX, 30 ANI, EXAF, RET,  ( OR & XOR bits )
DECIMAL -->








{ BLOCK 0296 }
( MORE FAST LINE SNORTS ) HEX

F= .LOOP  F= OKX  F= ENEG   F= NOWY

SUBR snorty   <ASSEMBLE    ( ^X < ^Y )
  LABEL .LOOP E A MOV, EXAF, E ORA, MAGIC OUT, 30 ANI, EXAF,
        D 0 X STX, EXX, H 7 BIT, ENEG JRNZ, A INR, 4 CPI,
        OKX JRC, A XRA, X INXX,
  LABEL OKX D DAD, NOWY JMPR,
  LABEL ENEG B DAD,
  LABEL NOWY EXX, A E MOV, B DADX, H DCX,
        H A MOV, L  ORA, .LOOP JRNZ, RET,  ASSEMBLE>
DECIMAL  -->




{ BLOCK 0297 }
( MORE FAST LINE SNORTS ) HEX

F= DRAWL  F= NEGE  F= NOWX  F= OKSA

SUBR snortx  <ASSEMBLE   ( ^Y < ^X )
  LABEL DRAWL  E A MOV, EXAF, E ORA, MAGIC OUT, 30 ANI, EXAF,
        D 0 X STX, EXX, H 7 BIT, NEGE JRNZ, EXX, B DADX, EXX,
        D DAD, NOWX JMPR,
  LABEL NEGE B DAD,
  LABEL NOWX  EXX, A INR, 4 CPI, OKSA JRC, X INXX,
        A XRA,
  LABEL OKSA  A E MOV, H DCX, H A MOV, L ORA, DRAWL JRNZ,
        RET,  ASSEMBLE>

DECIMAL  -->


{ BLOCK 0298 }
( LINE SNORTS <args. from VGER vector> ) HEX

         F= y2  F= x1  F= end  F= end2  F= xbig  F= noclp

CODE ONE-LINE <ASSEMBLE B PUSH, Y PUSHX, vaddr LIYD,
        VDESTYH Y H LDX, VDESTYL Y L LDX, VYH Y D LDX,
        VYL Y E LDX,
        EXX, VDESTXH Y H LDX, VDESTXL Y L LDX,
        VXH Y D LDX, VXL Y E LDX,
        EXX, VMAGIC Y A LDX, 7 A BIT, noclp JRZ,
        EXX, clip CALL, EXX, end2 JRNZ,
  LABEL noclp  X PUSHX,
        L A MOV, C0 ANI, A L MOV, E A MOV, C0 ANI, A E MOV,
        H PUSH, sbabsh CALL, XTHL, ( ^Y on stk ) EXX, EXAF,
DECIMAL -->


{ BLOCK 0299 }
( LINE SNORTS <args. from VGER vector> ) HEX

        L A MOV, C0 ANI, A L MOV, E A MOV, C0 ANI, A E MOV,
        H PUSH, sbabsh CALL, XTHL, ( ^X on stk ) EXX,
        slop CALL, ( set Y incr ) EXAF, y2 JRC, XCHG,
  LABEL y2 H PUSH, ( Y for smaller X ) EXX,
        x1 JRNC, XCHG,
  LABEL x1 E A MOV, C0 ANI, RLC, RLC, EXAF, ( shiftamount )
        H POP, relabs CALL, H PUSH, X POPX, ( addr. -> IX )
        D POP, H POP, ( ^X ^Y ) H PUSH, A ANA, D DSBC, H POP,
        xbig JRC, XCHG, init CALL, snorty CALL, end JMPR,
  LABEL xbig  init CALL, snortx CALL,
  LABEL end  X POPX,
  LABEL end2  Y POPX, B POP, NEXT ASSEMBLE>
: LINE  ONE-LINE SELF DESTX@ SELF DESTY@ XY! ;
DECIMAL ;S

